#!/usr/bin/env python
import requests
import json
import constants as c
import mysql.connector

from aiogram import Bot, Dispatcher, executor, types, utils
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

import histogram

bot = Bot(c.token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


class Form(StatesGroup): authorization = State()


class Feedback(StatesGroup): text = State()


class SendMessageToUsers(StatesGroup): text = State()


button = ["‚Ñπ –û–±—â–∞—è –∏—Ñ–æ—Ä–º–∞—Ü–∏—è", "üìï –ó–∞—á—ë—Ç–Ω–∞—è –∫–Ω–∏–∂–∫–∞", "üìä –†–µ–π—Ç–∏–Ω–≥", "‚ö† –î–æ–ª–≥–∏", "üóì –£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω", "üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–ø–æ—Ä—Ç. –∫–∞—Ñ.", "‚ùì–ü–æ–º–æ—â—å"]


def keyboard():
    key = types.ReplyKeyboardMarkup(resize_keyboard=True)
    but_1 = types.KeyboardButton(button[0])
    but_2 = types.KeyboardButton(button[1])
    but_3 = types.KeyboardButton(button[2])
    but_4 = types.KeyboardButton(button[3])
    but_5 = types.KeyboardButton(button[4])
    but_6 = types.KeyboardButton(button[5])
    but_7 = types.KeyboardButton(button[6])
    key.add(but_1, but_2)
    key.add(but_3, but_4)
    key.add(but_5, but_6)
    key.add(but_7)
    return key


@dp.message_handler(commands=['start'])
async def handle_text(message: types.Message):
    await reg_key(message)


async def reg_key(message):
    key = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    but_1 = types.KeyboardButton("üë• –í–æ–π—Ç–∏ –≤ –∫–∞–±–∏–Ω–µ—Ç")
    but_2 = types.KeyboardButton(button[6])
    key.add(but_1)
    key.add(but_2)
    await message.answer("–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫", reply_markup=key)


@dp.message_handler(commands=['keyboard'])
async def handle_text(message: types.Message):
    await message.answer("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–∫–ª—é—á–µ–Ω–∞", reply_markup=keyboard())


@dp.message_handler(commands=['feedback'])
async def handle_text(message: types.Message):
    await message.reply("–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∫–∞—Å–∞—Ç–µ–ª—å–Ω–æ –±–æ—Ç–∞\n\n–û—Ç–º–µ–Ω–∞ - [/exit]")
    await Feedback.text.set()


@dp.message_handler(state=Feedback.text)
async def feedback(message: types.Message, state: FSMContext):
    await state.finish()
    m = str(message.text).replace('_', '\\_').replace('*', '\\*').replace('`', '\\`').replace('[', '\\[')
    if m in {"/exit", "üë• –í–æ–π—Ç–∏ –≤ –∫–∞–±–∏–Ω–µ—Ç", button[0], button[1],
             button[2], button[3], button[4], button[5], button[6]}:
        await message.reply("–û—Ç–º–µ–Ω–µ–Ω–æ")
        return
    text = f"*Feedback!\n\nUser:* [{message.from_user.full_name}](tg://user?id={message.from_user.id})\n\n{m}"
    await bot.send_message(c.admin, text, parse_mode="Markdown")
    await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")


@dp.message_handler(commands=['send'])
async def handle_text(message: types.Message):
    if message.chat.id == c.admin:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n\n–û—Ç–º–µ–Ω–∞ - [/exit]")
        await SendMessageToUsers.text.set()


@dp.message_handler(content_types=['text'], state=SendMessageToUsers.text)
async def handle_text(message: types.Message, state: FSMContext):
    await state.finish()
    if message.text == "/exit":
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
        return
    conn = mysql.connector.connect(host=c.host, user=c.user, passwd=c.password, database=c.db)
    cursor = conn.cursor(buffered=True)
    selectQuery = "SELECT user_id FROM users"
    cursor.execute(selectQuery)
    users = cursor.fetchall()
    conn.close()
    i = 0
    j = 0
    for user in users:
        try:
            await bot.send_message(user[0], message.text)
            i += 1
        except utils.exceptions.BotBlocked: j += 1
    await message.answer(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {i}\n–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {j}")


@dp.message_handler(content_types=['text'])
async def handle_text(message: types.Message):
    if message.text == "üë• –í–æ–π—Ç–∏ –≤ –∫–∞–±–∏–Ω–µ—Ç":
        auth = await authentication(message, first=True)
        if auth:
            return
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π Email –∏ –ø–∞—Ä–æ–ª—å –æ—Ç –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n–ù–∞–ø—Ä–∏–º–µ—Ä:\nemail@example.com d1v8s3")
        await Form.authorization.set()
    elif message.text == button[6]:
        await message.answer(c.helper)
    elif message.text == button[0]:
        data = await page_1(message)
        if not data:
            return
        await message.answer(str(data), parse_mode="Markdown")
    elif message.text == button[1]:
        key = types.InlineKeyboardMarkup()
        a1 = types.InlineKeyboardButton(text="1", callback_data="21")
        a2 = types.InlineKeyboardButton(text="2", callback_data="22")
        a3 = types.InlineKeyboardButton(text="3", callback_data="23")
        a4 = types.InlineKeyboardButton(text="4", callback_data="24")
        a5 = types.InlineKeyboardButton(text="5", callback_data="25")
        a6 = types.InlineKeyboardButton(text="6", callback_data="26")
        a7 = types.InlineKeyboardButton(text="7", callback_data="27")
        a8 = types.InlineKeyboardButton(text="8", callback_data="28")
        a9 = types.InlineKeyboardButton(text="9", callback_data="29")
        a10 = types.InlineKeyboardButton(text="10", callback_data="210")
        a11 = types.InlineKeyboardButton(text="11", callback_data="211")
        a12 = types.InlineKeyboardButton(text="12", callback_data="212")
        key.add(a1, a2, a3, a4, a5, a6)
        key.add(a7, a8, a9, a10, a11, a12)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–º–µ—Å—Ç—Ä", reply_markup=key)
    elif message.text == button[2]:
        key = types.InlineKeyboardMarkup()
        a1 = types.InlineKeyboardButton(text="1", callback_data="31")
        a2 = types.InlineKeyboardButton(text="2", callback_data="32")
        a3 = types.InlineKeyboardButton(text="3", callback_data="33")
        a4 = types.InlineKeyboardButton(text="4", callback_data="34")
        a5 = types.InlineKeyboardButton(text="5", callback_data="35")
        a6 = types.InlineKeyboardButton(text="6", callback_data="36")
        a7 = types.InlineKeyboardButton(text="7", callback_data="37")
        a8 = types.InlineKeyboardButton(text="8", callback_data="38")
        a9 = types.InlineKeyboardButton(text="9", callback_data="39")
        a10 = types.InlineKeyboardButton(text="10", callback_data="310")
        a11 = types.InlineKeyboardButton(text="11", callback_data="311")
        a12 = types.InlineKeyboardButton(text="12", callback_data="312")
        key.add(a1, a2, a3, a4, a5, a6)
        key.add(a7, a8, a9, a10, a11, a12)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–º–µ—Å—Ç—Ä", reply_markup=key)
    elif message.text == button[4]:
        key = types.InlineKeyboardMarkup()
        a1 = types.InlineKeyboardButton(text="1", callback_data="41")
        a2 = types.InlineKeyboardButton(text="2", callback_data="42")
        a3 = types.InlineKeyboardButton(text="3", callback_data="43")
        a4 = types.InlineKeyboardButton(text="4", callback_data="44")
        a5 = types.InlineKeyboardButton(text="5", callback_data="45")
        a6 = types.InlineKeyboardButton(text="6", callback_data="46")
        a7 = types.InlineKeyboardButton(text="7", callback_data="47")
        a8 = types.InlineKeyboardButton(text="8", callback_data="48")
        a9 = types.InlineKeyboardButton(text="9", callback_data="49")
        a10 = types.InlineKeyboardButton(text="10", callback_data="410")
        a11 = types.InlineKeyboardButton(text="11", callback_data="411")
        a12 = types.InlineKeyboardButton(text="12", callback_data="412")
        key.add(a1, a2, a3, a4, a5, a6)
        key.add(a7, a8, a9, a10, a11, a12)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–º–µ—Å—Ç—Ä", reply_markup=key)
    elif message.text == button[3]:
        await page_3(message)
    elif message.text == button[5]:
        await page_sport(message)
    elif message.text == "/pdf":
        await send_pdf(message)


async def authentication(message, first=False):
    conn = mysql.connector.connect(host=c.host, user=c.user, passwd=c.password, database=c.db)
    cursor = conn.cursor(buffered=True)
    findQuery = "SELECT mail, pass, stud_id FROM users WHERE user_id=(%s)"
    cursor.execute(findQuery, [message.chat.id])
    auth = cursor.fetchone()
    conn.close()
    if first:
        if auth:
            await message.answer("–ü–æ—Ö–æ–∂–µ, –í—ã —É–∂–µ –≤—Ö–æ–¥–∏–ª–∏ –≤ —Å–≤–æ–π –∫–∞–±–∏–Ω–µ—Ç", reply_markup=keyboard())
    else:
        if not auth:
            await message.answer("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –≤—Ö–æ–¥–∞")
            await reg_key(message)
    return auth


@dp.message_handler(content_types=['text'], state=Form.authorization)
async def registration(message: types.Message, state: FSMContext):
    s = message.text
    await state.finish()
    try:
        mail = s.split(" ")[0]
        passwd = s.split(" ")[1]
    except IndexError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")
        return
    page = "1"
    response_1 = requests.post(f'https://schedule.kpi.kharkov.ua/json/kabinet?email={mail}&pass={passwd}&page={page}')
    answer_1 = json.loads(response_1.text)
    if not answer_1:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
        return
    student_id = "{st_cod}".format(**answer_1[0])
    conn = mysql.connector.connect(host=c.host, user=c.user, passwd=c.password, database=c.db)
    cursor = conn.cursor(buffered=True)
    inputQuery = "INSERT INTO users (user_id, stud_id, mail, pass) VALUES (%s, %s, %s, %s)"
    cursor.executemany(inputQuery, [(message.chat.id, student_id, mail, passwd)])
    conn.commit()
    conn.close()
    await message.answer("–í—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!", reply_markup=keyboard())


async def page_1(message):
    auth = await authentication(message)
    if not auth: return False
    mail = auth[0]
    passwd = auth[1]
    page = "1"
    response = requests.post(f'https://schedule.kpi.kharkov.ua/json/kabinet?email={mail}&pass={passwd}&page={page}')
    answer = json.loads(response.text)[0]
    main_page = "üë§ *–§–ò–û:* {fam} {imya} {otch}\n\n" \
                "üî¢ *–ö—É—Ä—Å:* {kurs}\n\n" \
                "üë• *–ì—Ä—É–ø–∞:* {grupa}\n\n" \
                "üè¢ *–§–∞–∫—É–ª—å—Ç–µ—Ç:* {fakultet}\n\n" \
                "üë®‚Äçüè´ *–ö–∞—Ñ–µ–¥—Ä–∞:* {kafedra}\n\n" \
                "üî¥ *–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:* {specialization}\n\n" \
                "üîµ *–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:* {speciality}\n\n" \
                "üü¢ *–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:* {osvitprog}\n\n" \
                "üë®‚Äçüéì *–£—Ä–æ–≤–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è:* {train_level}\n\n" \
                "üõÑ *–§–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è:* {train_form}\n\n" \
                "üíµ *–û–ø–ª–∞—Ç–∞:* {oplata}\n\n" \
                "üìÑ *–°–µ–º–µ—Å—Ç—Ä–æ–≤—ã–π –ø–ª–∞–Ω:* \\[/pdf]".format(**answer).replace("`", "'")
    return main_page


async def page_2(message, sem):
    auth = await authentication(message)
    if not auth: return False
    mail = auth[0]
    passwd = auth[1]
    page = "2"
    response = requests.post(f'https://schedule.kpi.kharkov.ua/json/kabinet?email={mail}&pass={passwd}&page={page}&semestr={sem}')
    answer = json.loads(response.text)
    if not answer:
        await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    with_mark = len(answer)
    subjects = ""
    for a in answer:
        ez = "–≠–∫–∑–∞–º–µ–Ω"
        if "{control}".format(**a) == "–ó": ez = "–ó–∞—á—ë—Ç"
        hvost = "{if_hvost}".format(**a)
        if not hvost: hvost = "‚Äî"
        ball = "{oc_short}{oc_ects} {oc_bol}".format(**a)
        if ball == " ":
            ball = "‚Äî"
            with_mark -= 1

        subjects = subjects + "üìö *–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞:* {subject}\n\n" \
                              f"‚úÖ *–û—Ü–µ–Ω–∫–∞:* {ball}\n\n" \
                              f"üìù *–ï/–ó:* {ez}\n\n" \
                              "üìä *–ö—Ä–µ–¥–∏—Ç:* {credit}\n\n" \
                              f"‚ùó *–•–≤–æ—Å—Ç:* {hvost}\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"\
                              .format(**a).replace("`", "'")

    key_histogram = None
    if with_mark > 4:
        key_histogram = types.InlineKeyboardMarkup()
        key_histogram.add(types.InlineKeyboardButton("–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞", callback_data="histogram2" + sem))
    await message.answer(subjects, parse_mode="Markdown", reply_markup=key_histogram)


async def page_5(message, sem):
    auth = await authentication(message)
    if not auth: return False
    mail = auth[0]
    passwd = auth[1]
    student_id = auth[2]
    page = "5"
    response = requests.post(f'https://schedule.kpi.kharkov.ua/json/kabinet?email={mail}&pass={passwd}&page={page}&semestr={sem}')
    answer = json.loads(response.text)
    all_in_list = len(answer)
    for a in answer:
        if int("{studid}".format(**a)) == student_id:
            rang1 = "üìä *–†–µ–π—Ç–∏–Ω–≥–æ–≤—ã–π –Ω–æ–º–µ—Ä:* {n} –∏–∑ " \
                    f"{all_in_list}\n\n" \
                    "‚úÖ *–†–µ–π—Ç–∏–Ω–≥–æ–≤—ã–π –±–∞–ª–ª:* {sbal100} | {sbal5}\n\n".format(**a)
            num = int("{n}".format(**a))
            break
    else:
        await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    percent = float("%.2f" % (num * 100 / all_in_list))
    percent_str = "üìà *–ü—Ä–æ—Ü–µ–Ω—Ç –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ:* {} %\n\n".format(percent)
    stip = "üí∏ *–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∏–ø–µ–Ω–¥–∏–∏:* "
    if percent < 50:
        if percent < 45:
            if percent < 40:
                stip += "100 %"
            else: stip += "–≤—ã—Å–æ–∫–∞—è"
        else: stip += "–Ω–∏–∑–∫–∞—è"
    else: stip += "–Ω—É–ª–µ–≤–∞—è"

    ps = "\n\n_PS: –µ—Å–ª–∏ –Ω–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω—ã –æ—Ü–µ–Ω–∫–∏ –ø–æ –≤—Å–µ–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º, —Ç–æ —Ä–µ–π—Ç–∏–Ω–≥ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã–º_"
    key_extend = types.InlineKeyboardMarkup()
    key_extend.add(types.InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫", callback_data="all_list" + sem))
    await message.answer(rang1 + percent_str + stip + ps, parse_mode="Markdown", reply_markup=key_extend)


async def page_4(message, sem):
    auth = await authentication(message)
    if not auth: return False
    mail = auth[0]
    passwd = auth[1]
    page = "4"
    response = requests.post(f'https://schedule.kpi.kharkov.ua/json/kabinet?email={mail}&pass={passwd}&page={page}&semestr={sem}')
    answer = json.loads(response.text)
    if not answer:
        await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    i = 0
    subjects = "*–ö—É—Ä—Å {kurs}, —Å–µ–º–µ—Å—Ç—Ä {semestr}:*\n\n".format(**answer[0])
    for a in answer:
        subjects = subjects + "`" + str(i + 1) + ".` " + "*–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞:* {subject}\n" \
                              "‚è± *–ê—É–¥–∏—Ç–æ—Ä–Ω—ã—Ö —á–∞—Å–æ–≤:* {audit}\n" \
                              "üìä *–ö—Ä–µ–¥–∏—Ç:* {credit}\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
                              .format(**a).replace("`", "'")
        i += 1

    key_histogram = None
    if len(answer) > 4:
        key_histogram = types.InlineKeyboardMarkup()
        key_histogram.add(types.InlineKeyboardButton("–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞", callback_data="histogram4" + sem))
    await message.answer(subjects, parse_mode="Markdown", reply_markup=key_histogram)


async def page_3(message):
    auth = await authentication(message)
    if not auth: return False
    mail = auth[0]
    passwd = auth[1]
    page = "3"
    response = requests.post(f'https://schedule.kpi.kharkov.ua/json/kabinet?email={mail}&pass={passwd}&page={page}')
    answer = json.loads(response.text)
    if not answer:
        await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    subjects = ""
    for a in answer:
        subjects = subjects + "üìö *–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞:* {subject}\n\n" \
                              "üë®‚Äçüè´ *–ü—Ä–µ–ø–æ–¥:* {prepod}\n\n" \
                              "üìÖ *–î–∞—Ç–∞:* {data}\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n" \
                              .format(**a).replace("`", "'")
    await message.answer(subjects, parse_mode="Markdown")


async def page_sport(message):
    response = requests.post('https://schedule.kpi.kharkov.ua/json/sport')
    answer = json.loads(response.text)
    if not answer:
        await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    key = types.InlineKeyboardMarkup()
    for a in answer:
        key.add(types.InlineKeyboardButton("{sport}".format(**a), callback_data="s{sportid}".format(**a)))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞", reply_markup=key)


def days(s_id):
    key = types.InlineKeyboardMarkup()
    but_1 = types.InlineKeyboardButton("–ü–Ω", callback_data=f"day1{s_id}")
    but_2 = types.InlineKeyboardButton("–í—Ç", callback_data=f"day2{s_id}")
    but_3 = types.InlineKeyboardButton("–°—Ä", callback_data=f"day3{s_id}")
    but_4 = types.InlineKeyboardButton("–ß—Ç", callback_data=f"day4{s_id}")
    but_5 = types.InlineKeyboardButton("–ü—Ç", callback_data=f"day5{s_id}")
    but_6 = types.InlineKeyboardButton("–°–±", callback_data=f"day6{s_id}")
    but_7 = types.InlineKeyboardButton("–í—Å", callback_data=f"day7{s_id}")
    key.add(but_1, but_2, but_3)
    key.add(but_4, but_5)
    key.add(but_6, but_7)
    return key


def get_schedule(s_id, day):
    day_names = ["", "–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", "–í—ñ–≤—Ç–æ—Ä–æ–∫", "–°–µ—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä", "–ü`—è—Ç–Ω–∏—Ü—è", "–°—É–±–æ—Ç–∞", "–ù–µ–¥—ñ–ª—è"]
    day = day_names[day]
    response = requests.post(f'https://schedule.kpi.kharkov.ua/json/sport?sport_id={s_id}')
    answer = json.loads(response.text)
    text = f"{day}:\n\n"
    for a in answer:
        if "{day}".format(**a) == day:
            text += "{time} ‚Äî {prepod}\n".format(**a)
    return text


async def send_pdf(message):
    auth = await authentication(message)
    if not auth: return False
    mail = auth[0]
    passwd = auth[1]
    url = f'http://schedule.kpi.kharkov.ua/json/getpdf?email={mail}&pass={passwd}'
    await bot.send_document(message.chat.id, url)


async def show_all_list(message, sem):
    auth = await authentication(message)
    if not auth: return False
    mail = auth[0]
    passwd = auth[1]
    student_id = auth[2]
    page = "5"
    response = requests.post(f'https://schedule.kpi.kharkov.ua/json/kabinet?email={mail}&pass={passwd}&page={page}&semestr={sem}')
    answer = json.loads(response.text)
    text = ""
    for a in answer:
        n = "{n}".format(**a)
        fio = "{fio}".format(**a)
        sbal100 = "%.1f" % float("{sbal100}".format(**a))
        if int("{studid}".format(**a)) == student_id:
            text += f"‚≠ê *{fio} ‚ûñ {sbal100}*\n"
        else:
            text += f"*{n}.* {fio} ‚ûñ {sbal100}\n"
    text = text.replace('`', "'")
    await bot.send_message(message.chat.id, text, parse_mode="Markdown")


async def send_histogram_of_page_2(message, sem):
    auth = await authentication(message)
    if not auth: return False
    mail = auth[0]
    passwd = auth[1]
    page = "2"
    response = requests.post(f'https://schedule.kpi.kharkov.ua/json/kabinet?email={mail}&pass={passwd}&page={page}&semestr={sem}')
    answer = json.loads(response.text)
    subject = []
    score = []
    count = 0
    for n in answer:
        if not "{oc_bol}".format(**n).isdigit():
            continue
        score.append(int("{oc_bol}".format(**n)))
        subject.append("{subject}".format(**n))
        count += 1
    response = requests.post(f'https://schedule.kpi.kharkov.ua/json/kabinet?email={mail}&pass={passwd}&page=1')
    answer = json.loads(response.text)[0]
    histogram.histogram(count, score, subject, "{fam} {imya}\n{otch}".format(**answer))
    with open("media/img.jpg", "rb") as f:
        img = f.read()
    await bot.send_photo(message.chat.id, img)


async def send_histogram_of_page_4(message, sem):
    auth = await authentication(message)
    if not auth: return False
    mail = auth[0]
    passwd = auth[1]
    page = "4"
    response = requests.post(f'https://schedule.kpi.kharkov.ua/json/kabinet?email={mail}&pass={passwd}&page={page}&semestr={sem}')
    answer = json.loads(response.text)
    subject = []
    score = []
    count = 0
    for n in answer:
        score.append(int(float("{credit}".format(**n))))
        subject.append("{subject}".format(**n))
        count += 1
    histogram.histogram(count, score, subject, f"–°–µ–º–µ—Å—Ç—Ä {sem}")
    with open("media/img.jpg", "rb") as f:
        img = f.read()
    await bot.send_photo(message.chat.id, img)


@dp.callback_query_handler(lambda callback_query: True)
async def callback_inline(callback_query: types.CallbackQuery):
    data = str(callback_query.data)
    if data[0] == "1":
        await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
        await page_1(callback_query.message)
    elif data[0] == "2":
        await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
        await page_2(callback_query.message, data[1:])
    elif data[0] == "3":
        await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
        await page_5(callback_query.message, data[1:])
    elif data[0] == "4":
        await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
        await page_4(callback_query.message, data[1:])

    elif data[0] == "s":
        await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
        s_id = data[1:]
        response = requests.post(f'https://schedule.kpi.kharkov.ua/json/sport?sport_id={s_id}')
        answer = json.loads(response.text)
        if not answer:
            await callback_query.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        await bot.send_message(callback_query.from_user.id, get_schedule(s_id, 1), reply_markup=days(s_id))

    elif data[:3] == "day":
        day = int(data[1])
        s_id = data[4:]
        try:
            await bot.edit_message_text(get_schedule(s_id, day), callback_query.from_user.id,
                                        callback_query.message.message_id, callback_query.from_user.id, reply_markup=days(s_id))
        except utils.exceptions.MessageNotModified:
            await callback_query.answer("–í—ã–±—Ä–∞–Ω —Ç–æ—Ç –∂–µ –¥–µ–Ω—å!")

    elif data[:8] == "all_list":
        await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
        sem = data[8:]
        await show_all_list(callback_query.message, sem)

    elif data[:10] == "histogram2":
        await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
        sem = data[10:]
        await send_histogram_of_page_2(callback_query.message, sem)

    elif data[:10] == "histogram4":
        await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
        sem = data[10:]
        await send_histogram_of_page_4(callback_query.message, sem)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
